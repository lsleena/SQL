Providing Meaningful Names for Columns :

select sal  salaries , comm commission
from emp;

 Referencing an Aliased Column in the WHERE Clause :
 
 select  *
 from (select sal  salaries , comm commission from emp)  as x
 where salary < 5000;
 
Concatenating Column Values :

 select concat ( ename ,' WORK AS ' ) as msg
 from emp;
 
 
 Using Conditional Logic in a SELECT Statement :
 
  perform IF-ELSE operations on values in your SELECT statement:
   if an employee is paid $2000 or less, a message of “UNDERPAID” is returned, if an employee is paid $4000 or more, a message of “OVERPAID” is returned, if they make somewhere in between, then “OK” is returned.
 
 select ename, sal ,
 case when sal <=2000 then 'UNDERPAID'
           when sal > 4000 then 'OVERPAID'
 		  else 'OK' end as status
 from emp ;
 
 The CASE expression allows you to perform condition logic on values returned by a query. You can provide an alias for a CASE expression to return a more readable result set. In the solution, you’ll see the alias STATUS given to the result of the CASE expression. The ELSE clause is optional. Omit the ELSE, and the CASE expression will return NULL for any row that does not satisfy the test condition.
